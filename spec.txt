NanoCorruption:

Goal: A fun-sized machine for more game-like hacking operations.

The machine is a balanced ternary computer operating entirely on trytes.

Trytes range in value from -364 to 364.
A tryte is composed of 6 balanced ternary digits, called trits.
Each trit has a value (-1 or T, 0, 1), meaning base conversions look like:

	10T001 == 1 * 3^5 + (-1) * 3^3 + 1 * 3^0 == 217

See http://en.wikipedia.org/wiki/Balanced_ternary for more information.

Two trits can written with balanced nonary (DCBA0123, with D being equal to -3),
or three trits (a tribble) in balanced septemvigesimal notation (A..M_N..Z)
(alphabet plus space/underscore in the middle, with A being -13).
Balanced septemvigesimal is written #sAZ, nonary as #nD3, trinary as #t10T001.

The memory is 729 trytes. All machine state is stored directly in memory.
Trytes on the zeroth row (#s_A-#s_Z) are 'registers', and more efficient to use
in machine code.

The machine code is based on tribbles, and aims at being directly human readable.

Examples:
`AXYZ` means `X = Y + Z`
`NBB_AA` means `B = B and #sAA`
`SBBNAA` means `B = B - AA`

Addressing:
Some tribbles are reserved to indicate special addressing modes.
_:     immediate: read next tryte for literal value
N:     absolute: read next tryte for operand location
else:  operand is a register

3 operand instructions:
A: Add
S: Sub
N: And
E: Or (Either)
Wabc:  Write a to b+c
Rabc:  Read b+c to a

1 operand instructions:
Z: Zero
U: Push
O: Pop
X: Swap tribble
C: Call
I: Increment
D: Decrement
F: Rotate right (forward)
B: Rotate left (backward)

Jumps:
Jr : Jump relative (Literal value of r, PC += r)
	J_: read next tryte for offset
	JN: skip 1 instruction
Grab : Jump if a>=b
Lrab : Jump if a<b
Qrab : Jump if a==b

Other:
T: Tritwise logical (+ word for operation)
Performs one of the 729 commutative ternary logical operations.

TabcOO -- perform logic operation OO performed on b and c, store to a.
		  Each trit of OO describes the result of one combination of operands:
		   0   1   2   3   4   5
		  TT, T0, T1, 00, 01, 11

Mrxx: Move the value in memory at #sxx to r
	MA_B: A = B
Vrxx: Set r to value #sxx
	VB_P: B = #s_P
Hnab: Send a, b to hardware device N
	Waits for hardware to complete operation. Hardware can read/write arbitrary memory.

Reserved registers:
P = Program Counter,
S = Stack Pointer,
Z = #s__ (zero), always.

Cycle counts:
Every read or write costs one cycle, except for reserved registers, which are free.
IA (increment A) is 3 cycles: read `IA`, read `A`, write `A`.
IS (increment stack pointer) is 1 cycle: read `IS`, reading/writing S is free.

Unused opcodes:
K
_
P
Y

Unresolved:
More useful operations? Flag register (maybe _)? Better conditional jumps?
